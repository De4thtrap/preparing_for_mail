	### двумерные массивы ###
a[i][j] == *(*(a + i) + j)

int **v = (int**)malloc(N * sizeof(int*));
for (int i = 0; i < N; ++i)
	v[i] = (int*)malloc(M * sizeof(int));

for (int i = 0; i < N; ++i)
	free(v[i]);
free(v);


	###  ###
gets(string);							ввод строки
puts(string);							вывод строки
std::cout << "Hello, world!";
std::cin >> a;
int putc(int с, FILE *fp);				записывает символ в файл
int getc(FILE *fp); 
int feof(FILE *fp);						возвращает 0, если не конец файла
fputs("Ехаmple", fp);					выводит строку в файл
fgets(string, n, fp);					считывает n-1 символов
fprintf(fp, "%х",а);
fscanf(fp, "%х", &a); 
int fseek(FILE *fp, long count, int access);
		count - относительное смещение
		access 0/1/2 - начало/текущее положение/конец файла
unsigned fread(void *ptr, unsigned size, unsigned n, FILE *fp);
unsigned fwrite(void *ptr, unsigned size, unsigned n, FILE *fp);

void *malloc(size_t size);
void *free(void *p);

FILE *fp;
fp = fopen(путь до файла, "способ использования файла");

Способ использования файла задается следующими символами:

r - открыть существующий файл для чтения;
w - создать новый файл для записи (если файл с указанным именем существует, то он будет переписан);
а - дополнить файл (открыть существующий файл для записи информации, начиная с конца файла, или создать файл, если он не существует);

r+ - открыть существующий файл для чтения и записи;
w+ - создать новый файл для чтения и записи;
a+ - дополнить или создать файл с возможностью чтения и записи;

rb - открыть двоичный файл для чтения;
wb - создать двоичный файл для записи;
аb - дополнить двоичный файл;

r+b - открыть двоичный файл для чтения и записи;
w+b - создать двоичный файл для чтения и записи;
а+b - дополнить двоичный файл с предоставлением возможности чтения и записи;

rt - открыть текстовой файл для чтения;
wt - создать текстовый файл для записи;
at - дополнить текстовый файл;

r+t - открыть текстовой файл для чтения и записи;
w+t - создать текстовый файл для чтения и записи;
a+t - дополнить текстовый файл с предоставлением возможности записи и чтения.

Если режим t или b не задан (например, r, w или а), то он определяется значением глобальной переменной _fmode. Если fmode=0_BINARY, то файлы открываются в двоичном режиме, а если _fmode=0_TEXT - в текстовом режиме. Константы 0_BINARY и 0_ТЕXТ определены в файле fcntl.h.


